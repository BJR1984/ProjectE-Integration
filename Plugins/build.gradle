/*
 * Copyright (c) 2019-2020 TagnumElite
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
apply plugin: 'java'

subprojects {
    apply from: rootProject.file('plugin.gradle')
}

def plugins = gradle.ext.pei_plugins

task setupDecompWorkspace (dependsOn: plugins.collect { it + ':setupDecompWorkspace' }) {}
task setupCiWorkspace (dependsOn: plugins.collect { it + ':setupCiWorkspace' }) {}
task setupDevWorkspace (dependsOn: plugins.collect { it + ':setupDevWorkspace' }) {}

task build(overwrite: true, type: Jar, dependsOn: plugins.collect { it + ':build' }) {
    for (plugin in plugins) {
        from zipTree(project(plugin).jar.archivePath)
    }
}

task sourcesJar(overwrite: true, type: Jar, dependsOn: plugins.collect { it + ':sourcesJar' }) {
    description = 'Creates a JAR containing the source code.'
    for (plugin in plugins) {
        from zipTree(project(plugin).sourcesJar.archivePath)
    }
    classifier = 'sources'
}

task deobfJar(overwrite: true, type: Jar, dependsOn: plugins.collect { it + ':deobfJar' }) {
    description = 'Creates a JAR containing the non-obfuscated compiled code.'
    for (plugin in plugins) {
        from zipTree(project(plugin).deobfJar.archivePath)
    }
    classifier = "deobf"
}

task javadocJar(overwrite: true, type: Jar, dependsOn: plugins.collect { it + ':javadocJar' }) {
    description = 'Creates a JAR containing the JavaDocs.'
    for (plugin in plugins) {
        from zipTree(project(plugin).javadocJar.archivePath)
    }
    classifier = 'javadoc'
}

artifacts {
    archives sourcesJar
    archives deobfJar
    archives javadocJar
}

build.dependsOn sourcesJar
build.dependsOn deobfJar
build.dependsOn javadocJar

