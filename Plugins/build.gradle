plugins { id 'java' }

subprojects {
    apply from: rootProject.file('plugin.gradle')
}

def plugins = gradle.ext.pei_plugins

task build(overwrite: true, type: Jar, dependsOn: plugins.collect { it + ':build' }) {
    for (plugin in plugins) {
        from zipTree(project(plugin).jar.archivePath)
    }
}

task sourcesJar(overwrite: true, type: Jar, dependsOn: plugins.collect { it + ':sourcesJar' }) {
    description = 'Creates a JAR containing the source code.'
    for (plugin in plugins) {
        from zipTree(project(plugin).sourcesJar.archivePath)
    }
    classifier = 'sources'
}

task deobfJar(overwrite: true, type: Jar, dependsOn: plugins.collect { it + ':deobfJar' }) {
    description = 'Creates a JAR containing the non-obfuscated compiled code.'
    for (plugin in plugins) {
        from zipTree(project(plugin).deobfJar.archivePath)
    }
    classifier = "deobf"
}

task javadocJar(overwrite: true, type: Jar, dependsOn: plugins.collect { it + ':javadocJar' }) {
    description = 'Creates a JAR containing the JavaDocs.'
    for (plugin in plugins) {
        from zipTree(project(plugin).javadocJar.archivePath)
    }
    classifier = 'javadoc'
}

artifacts {
    archives sourcesJar
    archives deobfJar
    archives javadocJar
}

build.dependsOn sourcesJar
build.dependsOn deobfJar
build.dependsOn javadocJar
