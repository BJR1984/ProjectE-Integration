buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
  id "com.matthewprenger.cursegradle" version "1.1.2"
}

apply plugin: 'net.minecraftforge.gradle.forge'

version = "${version}"
if (System.getenv("BUILD_NUMBER") != null) {
    version = version + "+b" + System.getenv("BUILD_NUMBER");
} else if (System.getenv("TRAVIS_BUILD_NUMBER") != null) {
    version = version + "+b" + System.getenv("TRAVIS_BUILD_NUMBER");
}

if (System.getenv("TRAVIS_PULL_REQUEST") != null) {
    if (System.getenv("TRAVIS_PULL_REQUEST") != "false") {
    version = version + "+p" + System.getenv("TRAVIS_PULL_REQUEST");
    }
}

group = "com.tagnumelite.projecteintegration"
archivesBaseName = "ProjectEIntegration-${mc_version}"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"
    
    mappings = "snapshot_${mcp_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    replace 'required-after:projecte', "required-after:projecte@[${pe_version},)"
    replace '@VERSION@', "${version}"
    
    replace 'after:actuallyadditions', "after:actuallyadditions@[${version_actuallyadditions},)"
    replace 'after:appliedenergistics2', "after:appliedenergistics2@[${version_appliedenergistics},)"
    //replace 'after:armorplus', "after:armorplus@[${version_armorplus},)"
    replace 'after:extendedcrafting', "after:extendedcrafting@[${version_extendedcrafting},)"
}

repositories {
    maven {
        name "ModMaven"
        url "https://modmaven.k-4u.nl"
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name = "CoFH Maven"
        url = "http://maven.covers1624.net"
    }
}

dependencies {
    deobfCompile "projecte:ProjectE:${mc_version}:${pe_version}"
    
    runtime "mezz.jei:jei_${mc_version}:4.14.4.264"
    
    deobfCompile "de.ellpeck.actuallyadditions:ActuallyAdditions:${version_actuallyadditions}"
    deobfProvided "appeng:appliedenergistics2:${version_appliedenergistics}:api"
    runtime ("appeng:appliedenergistics2:${version_appliedenergistics}") {
        exclude group: 'mezz.jei'
    }
    deobfProvided "morph.avaritia:Avaritia:${version_avaritia}:deobf"
    runtime ("morph.avaritia:Avaritia:${version_avaritia}:universal") {
        exclude group: 'mezz.jei'
        exclude group: 'CraftTweaker2'
        exclude group: 'codechicken', module: 'CodeChickenLib'
    }
    deobfCompile "vazkii.botania:Botania:${version_botania}"
    runtime "codechicken:CodeChickenLib:${version_codechickenlib}:universal"
    deobfCompile ("com.brandon3055.draconicevolution:Draconic-Evolution:${version_draconicevolution}:deobf") {
        exclude group: 'mezz.jei'
        exclude group: 'codechicken', module: 'CodeChickenLib'
        exclude group: 'cofh', module: 'RedstoneFlux'
    }
    provided "slimeknights.mantle:Mantle:1.12-1.3.3.42:deobf"
    runtime "slimeknights.mantle:Mantle:1.12-1.3.3.42"
    deobfCompile ("RebornCore:RebornCore-${mc_version}:${version_reborncore}:universal") {
        exclude group: 'mezz.jei'
    }
    deobfCompile "cofh:RedstoneFlux:${version_redstoneflux}:universal"
    deobfCompile "TechReborn:TechReborn-${mc_version}:${version_techreborn}:universal"
    provided "slimeknights:TConstruct:${mc_version}-${version_tconstruct}:deobf"
    runtime "slimeknights:TConstruct:${mc_version}-${version_tconstruct}"
    
    // CurseForge
    deobfCompile "astral-sorcery:astralsorcery:${version_astralsorcery}"
    deobfCompile "armorplus:armorplus:${mc_version}:${version_armorplus}"
    runtime "cucumber:Cucumber:${mc_version}:${version_cucumber}" //ExtendedCrafting & Mystical-Agriculture Dependency
    runtime "thedragonlib:thedragonlib:${mc_version}:${version_thedragonlib}" //ArmorPlus Dependency
    deobfProvided "endercore:EnderCore:${mc_version}:${version_endercore}"
    deobfProvided "ender-io:EnderIO:${mc_version}:${version_enderio}"
    deobfCompile "extended-crafting:ExtendedCrafting:${mc_version}:${version_extendedcrafting}"
    deobfCompile "mystical-agriculture:MysticalAgriculture:${mc_version}:${version_mysticalagriculture}"
    deobfCompile "nuclearcraft-mod:NuclearCraft-${version_nuclearcraft}-:1.12.2"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
    
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task storeVersion {
    ext.version_file = new File("version.txt")
    ext.version_file.text = "MOD_VERSION=" + version
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.main.java
    classifier = 'deobf'
}

task apiJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.main.java
    classifier = 'api'
    include 'com/tagnumelite/projecteintegration/api/**'
}

javadoc {
    include 'com/tagnumelite/projecteintegration/api/**'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from 'build/docs/javadoc'
    classifier 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java
    classifier = 'sources'
}

jar {}

artifacts {
    archives apiJar
    archives javadocJar
    archives sourcesJar
    archives deobfJar
}

runClient {
    jvmArgs "-Xmx4G", "-Xms4G"
}

curseforge {
    apiKey = System.env.CURSEFORGE_API_KEY != null ? System.env.CURSEFORGE_API_KEY : '0'
    project {
        id = "${cf_project}"
        changelog = "See https://github.com/TagnumElite/ProjectE-Integration/releases"
        releaseType = "${release_type}"
        addGameVersion "${mc_version}"
        mainArtifact(jar) {
          displayName = "ProjectE Integration - ${version}"
        }
        addArtifact(deobfJar) {
          displayName = "ProjectE Integration (Deobfuscated) - ${version}"
        }
        addArtifact(apiJar) {
          displayName = "ProjectE Integration (API) - ${version}"
        }
        addArtifact(sourcesJar) {
          displayName = "ProjectE Integration (Sources) - ${version}"
        }
        relations {
            requiredDependency 'ProjectE'
            
            // From Other Mavens
            optionalLibrary 'Actually-Additions'
            optionalLibrary 'Applied-Energistics-2'
            optionalLibrary 'Avaritia-1-10'
            optionalLibrary 'Botania'
            optionalLibrary 'Draconic-Evolution'
            optionalLibrary 'RebornCore'
            optionalLibrary 'TechReborn'
            optionalLibrary 'Tinkers-Construct'
            
            // From CurseForge Maven
            optionalLibrary 'Astral-Sorcery'
            optionalLibrary 'ArmorPlus'
            optionalLibrary 'Ender-IO'
            optionalLibrary 'Extended-Crafting'
            optionalLibrary 'Mystical-Agriculture'
            optionalLibrary 'NuclearCraft-mod'
        }
    }
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        project.hasProperty('keyStore')
    }
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

task signDeobfJar(type: SignJar, dependsOn: deobfJar) {
    onlyIf {
        project.hasProperty('keyStore')
    }
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = deobfJar.archivePath
    outputFile = deobfJar.archivePath
}

task signApiJar(type: SignJar, dependsOn: apiJar) {
    onlyIf {
        project.hasProperty('keyStore')
    }
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = apiJar.archivePath
    outputFile = apiJar.archivePath
}

task signSrcJar(type: SignJar, dependsOn: sourcesJar) {
    onlyIf {
        project.hasProperty('keyStore')
    }
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = sourcesJar.archivePath
    outputFile = sourcesJar.archivePath
}

build.dependsOn signJar
build.dependsOn signDeobfJar
build.dependsOn signSrcJar
build.dependsOn signApiJar

afterEvaluate {
    tasks["curseforge${cf_project}"].dependsOn.add(signJar)
    tasks["curseforge${cf_project}"].dependsOn.add(signDeobfJar)
    tasks["curseforge${cf_project}"].dependsOn.add(signApiJar)
    tasks["curseforge${cf_project}"].dependsOn.add(signSrcJar)
}
