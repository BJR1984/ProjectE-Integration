
apply plugin: 'base' // To add "clean" task to the root project.
/*
    }
}
*/
version = "${version}"
if (System.getenv("GITHUB_ACTIONS") != null && System.getenv("GITHUB_EVENT_NAME") != 'release') {
    version += "+${System.getenv("GITHUB_SHA").substring(0, 7)}"
}

subprojects {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "CurseForge"
            url = "https://minecraft.curseforge.com/api/maven/"
        }
        maven {
            name = "ModMaven"
            url = "https://modmaven.k-4u.nl"
        }
    }

    ext.version = "${version}"
    ext.mc_version="${mc_version}"
    ext.pe_version="${pe_version}"
    ext.mcp_version="${mcp_version}"
    ext.forgeVersion="${forge_version}"

}

repositories {
    mavenLocal()
    mavenCentral()
}

task wrapper(type: Wrapper, description: 'Creates and deploys the Gradle wrapper to the current directory.') {
    gradleVersion = '4.9'
}

def all_addons = ["PEI-Addon-Alpha", "PEI-Addon-Beta"]

subprojects.each { subproject -> evaluationDependsOn(subproject.path) }

task setupDecompWorkspaceAll(dependsOn: [':ProjectE-Integration:setupDecompWorkspace'] + all_addons.collect { ':' + it + ':setupDecompWorkspace' }) {
    doFirst {
        print("Setting up Decomp Workspace for all projects")
    }
}

task setupCIWorkspaceAll(dependsOn: [':ProjectE-Integration:setupCiWorkspace'] + all_addons.collect { ':' + it + ':setupCIWorkspace' }) {
    doFirst {
        print("Setting up CI Workspace for all projects")
    }
}

task assembleAll(type: Jar, dependsOn: [':ProjectE-Integration:build'] + all_addons.collect { ':' + it + ":build" }) {
    archiveName = "ProjectEIntegration-${mc_version}-${version}.jar"

    from zipTree(project(':ProjectE-Integration').jar.archivePath)
    for (addon in all_addons) {
        from zipTree(project(addon).jar.archivePath)
    }
}



