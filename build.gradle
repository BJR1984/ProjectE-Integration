buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    //id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.32'
}

apply plugin: 'base' // To add 'clean' task to the root project.

version = "${version}"
if (System.getenv('GITHUB_ACTIONS') != null && System.getenv('GITHUB_EVENT_NAME') != 'release') {
    version += "+${System.getenv('GITHUB_SHA').substring(0, 7)}"
}

subprojects {
    apply plugin: 'java'

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = 'MinecraftForge'
            url = 'http://files.minecraftforge.net/maven'
        }
        /*maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }*/
        //maven { CurseForge Maven is trash
        //    name = 'CurseForge'
        //    url = 'https://minecraft.curseforge.com/api/maven/'
        //}
        maven {
            name = 'ModMaven'
            url = 'https://modmaven.k-4u.nl'
        }
        maven {
            name = 'JitPack'
            url = 'https://jitpack.io'
        }
    }

    ext.version = "${version}"
    ext.mc_version="${mc_version}"
    ext.pe_version="${pe_version}"
    ext.mcp_version="${mcp_version}"
    ext.forgeVersion="${forge_version}"
}

task wrapper(type: Wrapper, description: 'Creates and deploys the Gradle wrapper to the current directory.') {
    gradleVersion = '4.9'
}

def sub_mods = ['Crafting', 'Duplicate', 'Library', 'Magic', 'Misc', 'Tech']

//subprojects.each { subproject -> evaluationDependsOn(subproject.path) }

task setupDecompWorkspaceAll(dependsOn: [':ProjectE-Integration:setupDecompWorkspace'] + sub_mods.collect { ':' + it + ':setupDecompWorkspace' }) { }

task setupCIWorkspaceAll(dependsOn: [':ProjectE-Integration:setupCiWorkspace'] + sub_mods.collect { ':' + it + ':setupCIWorkspace' }) { }

task assembleAll(type: Jar, dependsOn: [':ProjectE-Integration:build'] + sub_mods.collect { ':' + it + ":build" }) {
    archiveName = "ProjectEIntegration-${mc_version}-${version}.jar"

    from zipTree(project(':ProjectE-Integration').jar.archivePath)
    for (mod in sub_mods) {
        from zipTree(project(mod).jar.archivePath)
    }
}



