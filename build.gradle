buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id "org.jetbrains.changelog" version "1.3.+"
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mod_version}"
group = 'com.tagnumelite.projecteintegration'
archivesBaseName = "${mod_name}-${mc_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

//project.logger.info('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    mappings channel: 'official', version: '1.16.5'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                projecteintegration {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                projecteintegration {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'projecteintegration', '--all',
                    '--existing', file('src/main/resources').toString(),
                    '--existing', file('src/generated/resources').toString(),
                    '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                projecteintegration {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name "CurseMaven"
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name "Jitpack"
        url "https://jitpack.io"
        content {
            includeGroup "com.github"
        }
    }
    maven { name "BlameJared"; url 'https://maven.blamejared.com' }
    maven { name "Progwm16"; url "https://dvs1.progwm16.com/files/maven" }
    maven { name "ChickenBones"; url "https://chickenbones.net/maven/" }
    maven { name "TheIllusiveC4"; url "https://maven.theillusivec4.top/" }
    maven { name "TTerrag"; url "https://maven.tterrag.com/" }
    maven { name "Modmaven"; url "https://modmaven.dev/" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // ======================= [ Required Mods ] =======================
    implementation fg.deobf("curse.maven:projecte-226410:${version_projecte}")

    // ======================= [ Runtime Mods ] =======================
    runtimeOnly fg.deobf("curse.maven:brandons-core-231382:${version_brandonscore}") // Draconic Evolution dependency
    runtimeOnly fg.deobf("codechicken:CodeChickenLib:${version_codechickenlib}:universal")
    runtimeOnly fg.deobf("curse.maven:cucumber-272335:${version_cucumber}") // Extended Crafting and Mystical Agriculture dependency
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${version_curios}")
    runtimeOnly fg.deobf("com.jozufozu.flywheel:Flywheel:${version_flywheel}") // Create dependency
    runtimeOnly fg.deobf("mezz.jei:jei-${version_jei}")
    runtimeOnly fg.deobf("curse.maven:observerlib-316833:${version_observerlib}") // Astral Sorcery dependency
    // This is giving world loading problems for me
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${version_patchouli}")

    // ======================= [ Optional Mods ] =======================
    implementation fg.deobf("appeng:appliedenergistics2:${version_appliedenergistics}")
    implementation fg.deobf("curse.maven:astralsorcery-241721:${version_astralsorcery}")
    implementation fg.deobf("vazkii.botania:Botania:${version_botania}")
    implementation fg.deobf("curse.maven:compactcrafting-429735:${version_compactcrafting}")
    implementation fg.deobf("curse.maven:create-328085:${version_create}")
    implementation fg.deobf("curse.maven:draconic-evolution-223565:${version_draconicevolution}")
    implementation fg.deobf("curse.maven:exnihilo-sequel-400012:${version_exnihilo_sequel}")
    implementation fg.deobf("curse.maven:extended-crafting-268387:${version_extendedcrafting}")
    implementation fg.deobf("curse.maven:farmers-delight-398521:${version_farmersdelight}")
    implementation fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${mc_version}-${version_immersiveengineering}")
    implementation fg.deobf("curse.maven:mystical-agriculture-246640:${version_mysticalagriculture}")
    implementation fg.deobf("curse.maven:pneumaticcraft-repressurized-281849:${version_pneumaticcraft}")
    implementation fg.deobf("vazkii.psi:Psi:${version_psi}")
    implementation fg.deobf("curse.maven:woot-244049:${version_woot}")
}

jar {
    manifest {
        attributes([
            "Specification-Title": "projecteintegration",
            "Specification-Vendor": "tagnumelite",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

javadoc {
    source = [sourceSets.main.allJava]
    // prevent java 8's strict doclint for javadocs from failing builds
    options.addStringOption('Xdoclint:none', '-quiet')
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveBaseName.set(project.archivesBaseName)
    archiveVersion.set("${project.version}")
    archiveClassifier.set('sources')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
}

artifacts {
    archives jar, sourcesJar, javadocJar
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = mod_name
            group = "com.tagnumelite"
            artifacts {
                artifact jar
                artifact sourcesJar
                artifact javadocJar
            }
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
        // GitHub Packages
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/tagnumelite/projecte-integration"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

changelog {
    version = "${project.version}"
    path = "${project.projectDir}/CHANGELOG.md"
    header = "[${-> version.get()}]"
    itemPrefix = "-"
    keepUnreleasedSection = true
    unreleasedTerm = "[Unreleased]"
    groups = ["Added", "Changed", "Deprecated", "Removed", "Fixed", "Security"]
}

tasks.register('mod_relations') {
    doLast {
        def requiredMods = ['projecte']
        def optionalMods = [
                'applied-energistics-2',
                'astral-sorcery',
                'botania',
                'compact-crafting',
                'create',
                'ex-nihilo-sequentia',
                'extended-crafting',
                'farmers-delight',
                'immersive-engineering',
                'mystical-agriculture',
                'pneumaticcraft-repressurized',
                'psi',
                'woot'
        ]
        def allMods = []
        allMods.addAll(requiredMods.stream().sorted().map(modid -> modid + ":requiredDependency").collect());
        allMods.addAll(optionalMods.stream().sorted().map(modid -> modid + ":optionalDependency").collect());
        println String.join(',', allMods)
    }
}
