buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'com.matthewprenger.cursegradle'

version = "${mod_version}"
group = 'com.tagnumelite.projecteintegration' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "ProjectEIntegration-${mc_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                projecteintegration {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                projecteintegration {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'projecteintegration', '--all',
                    '--existing', file('src/main/resources').toString(),
                    '--existing', file('src/generated/resources').toString(),
                    '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                projecteintegration {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url "https://jitpack.io"
        content {
            includeGroup "com.github"
        }
    }
    maven { url 'https://maven.blamejared.com' }
    maven { url "https://dvs1.progwm16.com/files/maven" }
    maven { url "https://chickenbones.net/maven/" }
    maven { url "https://modmaven.k-4u.nl" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // ======================= [ Required Mods ] =======================
    implementation fg.deobf("curse.maven:projecte-226410:${version_projecte}")

    // ======================= [ Runtime Mods ] =======================
    runtimeOnly fg.deobf("mezz.jei:jei-${version_jei}")
    // This is giving world loading problems for me
    //runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-53.1")
    runtimeOnly fg.deobf("codechicken:CodeChickenLib:${version_codechickenlib}:universal")
    runtimeOnly fg.deobf("curse.maven:brandons-core-231382:${version_brandonscore}")

    // ======================= [ Optional Mods ] =======================
    // compileOnly because of mixin problems
    compileOnly fg.deobf("appeng:appliedenergistics2:${version_appliedenergistics}")
    implementation fg.deobf("curse.maven:compactcrafting-429735:${version_compactcrafting}")
    implementation fg.deobf("curse.maven:cucumber-272335:${version_cucumber}") // Extended Crafting dependency
    implementation fg.deobf("curse.maven:draconic-evolution-223565:${version_draconicevolution}")
    // compileOnly because of mixin problems
    compileOnly fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${mc_version}-${version_immersiveengineering}")
    implementation fg.deobf("curse.maven:extended-crafting-268387:${version_extendedcrafting}")
    implementation fg.deobf("curse.maven:woot-244049:${version_woot}")
}

jar {
    manifest {
        attributes([
            "Specification-Title": "projecteintegration",
            "Specification-Vendor": "tagnumelite",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

javadoc {
    source = [sourceSets.main.allJava]
    // prevent java 8's strict doclint for javadocs from failing builds
    options.addStringOption('Xdoclint:none', '-quiet')
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveBaseName.set(project.archivesBaseName)
    archiveVersion.set("${project.version}")
    archiveClassifier.set('sources')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
}

artifacts {
    archives jar, sourcesJar, javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
            artifact javadocJar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
        // GitHub Packages
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/TagnumElite/ProjectE-Integration"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

curseforge {
    apiKey = System.env.CURSEFORGE_API_KEY != null ? System.env.CURSEFORGE_API_KEY : '0'
    project {
        id = "${cf_project}"
        changelog = ""
        changelogType = 'markdown'
        releaseType = "${release_type}"
        addGameVersion "${mc_version}"
        mainArtifact(jar) { displayName = "ProjectEIntegration-${mc_version}-${version}" }
        addArtifact sourcesJar
        addArtifact javadocJar
        relations {
            requiredDependency 'ProjectE'

            // Crafting Plugins
            optionalLibrary 'Applied-Energistics-2'
            optionalLibrary 'Extended-Crafting'
            optionalLibrary 'Compact-Crafting'
            optionalLibrary 'Immersive-Engineering'
            optionalLibrary 'Woot'
        }
    }
}

afterEvaluate {
    //tasks["curseforge${cf_project}"].dependsOn.add(updateJSON)
}
