/*
 * Copyright (c) 2019-2020 TagnumElite
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
    id 'com.wynprice.cursemaven' version '2.1.1' apply false
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.32'
}

apply plugin: 'java'

version = "${version}"
if (System.getenv('GITHUB_ACTIONS') != null && System.getenv('GITHUB_EVENT_NAME') != 'release') {
    version += "+${System.getenv('GITHUB_SHA').substring(0, 7)}"
}

group = "com.tagnumelite.projecteintegration"
archivesBaseName = "ProjectEIntegration-${mc_version}"

task wrapper(type: Wrapper, description: 'Creates and deploys the Gradle wrapper to the current directory.') {
    gradleVersion = '4.9'
}

def projects = ['ProjectE-Integration', 'Plugins']

subprojects {
    sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
    compileJava {
        sourceCompatibility = targetCompatibility = '1.8'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = 'MinecraftForge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'CurseForge'
            url = 'https://minecraft.curseforge.com/api/maven/'
        }
        maven {
            name = 'ModMaven'
            url = 'https://modmaven.k-4u.nl'
        }
        maven {
            name = 'JitPack'
            url = 'https://jitpack.io'
        }
    }
}

subprojects.each { subproject -> evaluationDependsOn(subproject.path) }

task setupDecompWorkspace(dependsOn: projects.collect { ':' + it + ':setupDecompWorkspace' }) {}
task setupCiWorkspace(dependsOn: projects.collect { ':' + it + ':setupCiWorkspace' }) {}
task setupDevWorkspace(dependsOn: projects.collect { ':' + it + ':setupDevWorkspace' }) {}

task build(overwrite: true, type: Jar, dependsOn: projects.collect { ':' + it + ':build' }) {
    for (plugin in projects) {
        from zipTree(project(plugin).jar.archivePath)
    }
}

task sourcesJar(type: Jar, dependsOn: projects.collect { ':' + it + ':sourcesJar' }) {
    description = 'Creates a JAR containing the source code.'
    for (plugin in projects) {
        from zipTree(project(plugin).sourcesJar.archivePath)
    }
    classifier = 'sources'
}

task deobfJar(type: Jar, dependsOn: projects.collect { ':' + it + ':deobfJar' }) {
    description = 'Creates a JAR containing the non-obfuscated compiled code.'
    for (plugin in projects) {
        from zipTree(project(plugin).deobfJar.archivePath)
    }
    classifier = "deobf"
}

task javadocJar(type: Jar, dependsOn: projects.collect { ':' + it + ':javadocJar' }) {
    description = 'Creates a JAR containing the JavaDocs.'
    for (plugin in projects) {
        from zipTree(project(plugin).javadocJar.archivePath)
    }
    classifier = 'javadoc'
}

artifacts {
    archives sourcesJar
    archives deobfJar
    archives javadocJar
}

task printEnd {
    doLast {
        println "End Build"
    }
}

jar.finalizedBy printEnd
build.dependsOn sourcesJar
build.dependsOn deobfJar
build.dependsOn javadocJar
/*
curseforge {
    options {
        debug = true
    }
    apiKey = System.env.CURSEFORGE_API_KEY != null ? System.env.CURSEFORGE_API_KEY : '0'
    project {
        id = "${cf_project}"
        changelog = file('changelog.html')
        changelogType = 'html'
        releaseType = "${release_type}"
        addGameVersion "${mc_version}"
        mainArtifact(jar) {
            displayName = "ProjectE Integration - ${version}"
        }
        addArtifact(deobfJar) {
            displayName = "ProjectE Integration - ${version} - deobf"
        }
        addArtifact(apiJar) {
            displayName = "ProjectE Integration - ${version} - api"
        }
        addArtifact(sourcesJar) {
            displayName = "ProjectE Integration - ${version} - sources"
        }
        relations {
            requiredDependency 'ProjectE'

            // From Other Mavens
            optionalLibrary 'Actually-Additions'
            optionalLibrary 'Applied-Energistics-2'
            optionalLibrary 'Avaritia-1-10'
            optionalLibrary 'Botania'
            //optionalLibrary 'Buildcraft'
            optionalLibrary 'CraftTweaker'
            optionalLibrary 'Draconic-Evolution'
            optionalLibrary 'Forestry'
            optionalLibrary 'Immersive-Engineering'
            optionalLibrary 'Industrial-Craft'
            optionalLibrary 'Psi'
            optionalLibrary 'RebornCore'
            //optionalLibrary 'Redstone-Flux'
            optionalLibrary 'TechReborn'
            optionalLibrary 'Thermal-Expansion'
            optionalLibrary 'Tinkers-Construct'

            // From CurseForge Maven
            optionalLibrary 'Advanced-Rocketry'
            optionalLibrary 'Astral-Sorcery'
            optionalLibrary 'ArmorPlus'
            optionalLibrary 'Artisan-Worktables'
            optionalLibrary 'Blood-Magic'
            optionalLibrary 'Calculator'
            optionalLibrary 'Charset-Lib'
            optionalLibrary 'Compact-Machines'
            optionalLibrary 'Embers'
            optionalLibrary 'Ender-IO'
            optionalLibrary 'Extended-Crafting'
            optionalLibrary 'ExtraBotany'
            //optionalLibrary 'Extra-Utilities'
            optionalLibrary 'LibVulpes'
            optionalLibrary 'Mekanism'
            optionalLibrary 'Modular-Machinery'
            optionalLibrary 'Mystical-Agriculture'
            optionalLibrary 'NuclearCraft-mod'
            optionalLibrary 'Pams-HarvestCraft'
            optionalLibrary 'Thaumcraft'
            optionalLibrary 'Woot'
        }
    }
}

task makeChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    filePath = "changelog.html"
    untaggedName = "Current release ${project.version}"
    fromCommit = "939adc1b1975da6b89486d1e5f02e9e18027f0c2"
    toRef =  "HEAD"
    templateContent = """
{{#tags}}
  <h3>{{name}}</h3>
  <ul>
    {{#commits}}
    <li>{{{message}}}</li>
    {{/commits}}
  </ul>
{{/tags}}
"""
}

afterEvaluate {
    tasks["curseforge${cf_project}"].dependsOn.add(sourcesJar)
    tasks["curseforge${cf_project}"].dependsOn.add(deobfJar)
    tasks["curseforge${cf_project}"].dependsOn.add(javadocJar)
    tasks["curseforge${cf_project}"].dependsOn.add(makeChangelog)
}
*/
